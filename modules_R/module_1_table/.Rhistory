for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
pts <- gUnion(pts,tmp)
}
dir <- "C:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/data/input/"
shp <-readOGR(dsn=paste(dir,"Smallholder_Cacao_geo_multipart.shp",sep=""),layer="Smallholder_Cacao_geo_multipart")
crs(shp)<-CRS("+proj=longlat +datum=WGS84")
legend<-levels(as.factor(shp@data$project))
areas<-sapply(1:length(legend),function(x){gArea(shp[shp@data$class == x,])})
sampling<-data.frame(cbind(legend,1:length(legend),table(shp@data$project)))
names(sampling)<-c("map_class","map_code","nb_poly")
table(shp@data$project)
sampling
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
pts <- gUnion(pts,tmp)
}
sampling
summary(pts)
names(pts)
plot(pts)
nrow(pts@coords)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
att_vec <- rep(legnd[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
att_vec <- rep(legend[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(legend[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
tmp_vec <- rep(legend[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
pts <- gUnion(pts,tmp)
att_vec <- c(att_vec,tmp_vec)
}
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(legend[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
tmp_vec <- rep(legend[i],as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
pts <- gUnion(pts,tmp)
att_vec <- append(att_vec,tmp_vec)
}
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(nrow(pts@coords),as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
tmp_vec <- rep(nrow(tmp@coords),as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
pts <- gUnion(pts,tmp)
att_vec <- append(att_vec,tmp_vec)
}
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(nrow(pts@coords),as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly))
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(legend[i],nrow(pts@coords))
i=1
polys <- shp[shp@data$class == legend[i]]
pts<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
att_vec <- rep(legend[i],nrow(pts@coords))
for(i in 2:length(legend)){
polys <- shp[shp@data$class == legend[i]]
tmp<-spsample(polys,as.numeric(sampling[sampling$map_class == legend[i],]$nb_poly),type="stratified")
tmp_vec <- rep(legend[i],nrow(tmp@coords))
pts <- gUnion(pts,tmp)
att_vec <- append(att_vec,tmp_vec)
}
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=data.frame(att_vec),
proj4string=CRS("+proj=longlat +datum=WGS84"))
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=as.data.frame(att_vec),
proj4string=CRS("+proj=longlat +datum=WGS84"))
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=as.data.frame(cbind(att_vec,att_vec)),
proj4string=CRS("+proj=longlat +datum=WGS84"))
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=as.data.frame(cbind(att_vec,att_vec)),
proj4string=CRS("+proj=longlat +datum=WGS84"),
match.ID=F)
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=as.data.frame(att_vec),
proj4string=CRS("+proj=longlat +datum=WGS84"),
match.ID=F)
sp_df<-SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=as.data.frame(cbind(1:length(att_vec),att_vec)),
proj4string=CRS("+proj=longlat +datum=WGS84"),
match.ID=F)
sp_df <- SpatialPointsDataFrame(
coords=pts@coords[,c(1,2)],
data=data.frame(cbind(1:length(att_vec),att_vec)),
proj4string=CRS("+proj=longlat +datum=WGS84"),
match.ID=F)
data=data.frame(cbind(1:length(att_vec),att_vec))
sp_df <- SpatialPointsDataFrame(
coords=data.frame(pts@coords[,c(1,2)]),
data=data.frame(cbind(1:length(att_vec),att_vec)),
proj4string=CRS("+proj=longlat +datum=WGS84"),
match.ID=F)
plot(sp_df)
hm <- sp_df@data
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
proj4string(sp_df)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_windows/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_raster/",launch.browser = T)
runApp("c:/Users/dannunzio/Documents/countries/congo_brazza/formation_CE/AA_design_raster/",launch.browser = T)
devtools::install_github('rstudio/rsconnect')
find_rtools()
find_rtools()
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
install.packages("corrplot")
packages(dismo)
packages(DT)
match.call()
as.character(match.call()[[2]])
library(swirl)
packages(swirl)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
quit
exit()
exit
quit()
sdfsd
3
info()
bye()
shiny::runApp('R/my_shiny_apps/AA_design_vecteur')
runApp('R/my_shiny_apps/AA_design_vecteur')
runApp('R/my_shiny_apps/AA_design_vecteur')
runApp('R/my_shiny_apps/AA_design_vecteur')
runApp('R/my_shiny_apps/AA_design_vecteur')
options(stringsAsFactors=FALSE)
setwd("C:/Users/dannunzio/Documents/countries/congo_brazza/formation_R/module_1/")
getwd()
### Lire la table de donnees: fonctions "<-" et "read.csv"
df    <- read.csv("../data/table_evaluation_precision_classes.csv")
areas <- read.csv("../data/table_superficies_classes.csv")
### Afficher un résumé des tables: fonction "str"
str(df)
str(areas)
### Afficher le haut d'une table: fonction "head"
head(df)
head(df,2)
### Afficher le nom des colonnes d'une table: fonction "names"
names(df)
areas
### Extraire une colonne d'une table: fonction "$"
areas$area
### Afficher la longueur d'un vecteur/table: fonction "length"
length(df$map_code)
### Afficher la classe d'un vecteur/table: fonction "class"
class(df$map_code)
### Supprimer les doublons d'un vecteur/table: fonction "unique"
unique(df$map_code)
### Afficher les niveaux d'une variable: fonction "levels"
levels(df$map_code)
### Changer le type d'une variable: fonction "as.XXXXX"
### NB: plusieurs fonctions imbriquées, l'indentation est automatique
(legend <- levels(as.factor(df$map_code)
)
)
### Afficher un comptage des éléments par colonne: fonction "table"
table(df$map_code)
### Créer un tableau croisé
matrix <- table(df$map_code,df$ref_code)
matrix
### Calculer une somme: fonction "sum"
sum(areas$area)
### Extraire un élément / une ligne / une colonne: fonction "[,]"
areas[5,]
areas[areas$code>20,]
areas[,"class"]
areas[areas$code==13,"class"]
areas[areas$code==13,]$area
### Calculer la matrice des proportions
matrix_w <- matrix
for(i in 1:length(legend)){
for(j in 1:length(legend)){
matrix_w[i,j] <- matrix[i,j]/
sum(matrix[i,])*
areas[areas$code==legend[i],]$area/
sum(areas$area)
}
}
### Calculer la matrice des erreurs standard
matrix_se<-matrix
for(i in 1:length(legend)){
for(j in 1:length(legend)){
matrix_se[i,j]<-
(areas[areas$code==legend[i],]$area/sum(areas$area))^2*
matrix[i,j]/
sum(matrix[i,])*
(1-matrix[i,j]/sum(matrix[i,]))/
(sum(matrix[i,])-1)
}
}
### Creation du Jeu de donnees de synthese
confusion<-data.frame(matrix(nrow=length(legend)+1,ncol=9))
names(confusion)<-c("class","code","Pa","PaW","Ua","area","area_adj","se","ci")
### Integration des elements dans le jeu de donnees synthese
for(i in 1:length(legend)){
confusion[i,]$class    <- areas[areas$code==legend[i],]$class
confusion[i,]$code     <- areas[areas$code==legend[i],]$code
confusion[i,]$Pa       <- matrix[i,i]/sum(matrix[,i])
confusion[i,]$Ua       <- matrix[i,i]/sum(matrix[i,])
confusion[i,]$PaW      <- matrix_w[i,i]/sum(matrix_w[,i])
confusion[i,]$area_adj <- sum(matrix_w[,i])*sum(areas$area)
confusion[i,]$area     <- areas[areas$code==legend[i],]$area
confusion[i,]$se       <- sqrt(sum(matrix_se[,i]))*sum(areas$area)
confusion[i,]$ci       <- confusion[i,]$se*1.96
}
### Calculer la Precision Generale
confusion[length(legend)+1,]<-c("overall","",sum(diag(matrix))/sum(matrix[]),sum(diag(matrix_w))/sum(matrix_w[]),"",sum(areas$area),sum(areas$area),"","")
### Afficher Resultats
confusion
matrix
library(ggplot2)
confusion$ci      <- as.numeric(confusion$ci)
confusion$area_adj<- as.numeric(confusion$area_adj)
### Créer un graphique
avg.plot<-qplot(class,
area_adj,
data=confusion,
geom="bar",
stat="identity")
### Afficher le graphique
avg.plot+geom_bar()
dev.off()
### Rajouter les barres d'erreur sur le graphique
avg.plot+geom_bar()+
geom_errorbar(aes(ymax=area_adj+ci, ymin=area_adj-ci))+
theme_bw()
avg.plot<-ggplot(data=dfa,aes(x=class,y=area_adj))
avg.plot<-ggplot(data=confusion,aes(x=class,y=area_adj))
avg.plot+geom_bar(stat="identity",fill="darkgrey")
+geom_errorbar(aes(ymax=area_adj+ci, ymin=area_adj-ci))+theme_bw()
dev.off()
### Rajouter les barres d'erreur sur le graphique
avg.plot+
geom_bar(stat="identity",fill="darkgrey")+
geom_errorbar(aes(ymax=area_adj+ci, ymin=area_adj-ci))+
theme_bw()
library(rgdal)
library(raster)
### Lire un fichier raster: fonction "raster"
rast_congo <- raster("../data/raster_utcatf.tif")
str(rast_congo)
# ######### Créer un extrait spatial
e<-extent(14,16,0,2)
rast<-crop(rast_congo,e)
plot(rast_congo)
plot(rast)
tmp <- sampleRandom(rast,1000,xy=TRUE)
# ######### Convertir en data frame
my_sample <- data.frame(tmp)
# ######### Changer les noms des colonnes
names(my_sample) <- c("x_coord","y_coord","value")
str(my_sample)
# ######### Extraire les colonnes latitude et longitude seulement
x<-my_sample$x_coord
y<-my_sample$y_coord
# ######### Afficher les points: fonction "plot"
plot(x,y)
# ######### Effacer le graphique
dev.off()
# ######### Créer un cadre vide de la taille du raster de départ
plot(my_sample$x_coord,my_sample$y_coord,
type="n",xlab="longitude",ylab="latitude")
# ######### Afficher le raster: fonction "rasterImage"
rasterImage(as.raster(rast),xmin(rast),ymin(rast),xmax(rast),ymax(rast))
# ######### Afficher le raster: fonction "plot"
class <-c(0,1,5,10,12,13,31,32,33,34)
cols <- c("black","grey","blue","darkgreen","green","green","red","yellow","orange","yellow")
#plot(rast,col=cols,breaks=class)
plot(rast,col=cols,breaks=class)
# ######### Rajouter des points sur un graphique existant: fonction "points"
points(my_sample$x_coord,my_sample$y_coord)
# ######### Créer une colonne avec des identificateurs uniques: fonction "row"
my_sample$id <- row(my_sample)[,1]
head(my_sample)
# ######### Créer le vecteur logique qui indique si la valeur du raster est différente de zero: opérateur logique "!="
list_logic <- my_sample$value != 0
head(list_logic)
# ######### Créer un sous-jeu de données (points à l'intérieur du pays)
in_country <- my_sample[list_logic,]
points(in_country$x_coord,in_country$y_coord,col="grey")
# ######### Voir la distribution des points par valeurs
table(in_country$value)
pts_FP <- my_sample[
sample(my_sample[
my_sample$value==11,]$id,50)
,]
# ######### Ajouter les points sur le graphique
points(pts_FP$x_coord,pts_FP$y_coord,col="darkgreen",pch=19)
################################################
################################################
# Cette procédure a permis de sélectionner des points dans la classe Foret Primaire
# Mais qu'en est-il des classes plus rares ?
################################################
# ######### Extraire des points avec une valeur particulière: fonction "rasterToPoints"
start<-Sys.time()
rast_PP<-rasterToPoints(rast,
fun=function(rast){rast==31})
Sys.time()-start
# ######### Transformer en data frame et ajouter une colonne identifiant unique
df_pts_PP<-as.data.frame(rast_PP)
names(df_pts_PP) <- c("x_coord","y_coord","value")
df_pts_PP$id<-row(df_pts_PP)[,1]
# ######### Sélectionner aléatoirement 50 points parmi ces pixels individualisés
pts_PP<-df_pts_PP[sample(df_pts_PP$id,50),]
# ######### Afficher les points de pertes en rouge
points(pts_PP$x_coord,pts_PP$y_coord,col="red",pch=19)
# ######### Combiner les deux jeux de données: fonction "rbind"
mes_points <- rbind(pts_FP,pts_PP)
# ######### Vérifier les valeurs des points finaux
table(mes_points$value)
# ######### Trasnformer en data frame spatial
sp_df<-SpatialPointsDataFrame(
coords = mes_points[,c(1,2)],
data   = data.frame(mes_points[,c(4,3)]),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
# ######### Exporter en KML
writeOGR(obj=sp_df,dsn="mes_points.kml",layer="mes_points",driver = "KML")
library(tmap) # pour faire des cartes esthétiques
packages(tmap)
library(dplyr) # a rajouter!
library(maps)
packages(maps)
library(rgdal) # pour lire les format GDAL/OGR
library(foreign) # pour lire les fichiers DBF
library(raster) # pour lire les fichiers raster, obtenir les projections
library(rgeos) # pour faire des opérations sur les géometries
library(tmap) # pour faire des cartes esthétiques
library(dplyr) # a rajouter!
library(maps)
### Lire un fichier DBF: fonction "read.dbf"
df     <- read.dbf("../data/points_NFI.dbf")
### Lire un fichier geospatial/vecteur: fonction "readOGR"
poly_admin <- readOGR(dsn="../data",
layer="congo_departement_geo")
points_IFN <- readOGR(dsn="../data",
layer="points_NFI")
### Obtenir les caractéristiques d'un fichier vecteur
summary(poly_admin)
names(df)[4] <- "ce_truc"
### Projeter un fichier vecteur
poly_utm <- spTransform(poly_admin,
CRS("+init=epsg:32633"))
point_utm<- spTransform(points_IFN, CRS("+init=epsg:32633"))
### Extraire le système de projection et l'étendue comme des variables
my_crs <- projection(poly_utm)
my_ext <- extent(poly_utm)
extent(poly_admin)
### Créer un raster vide de la meme étendue et projection que le vecteur, avec une résolution de 100 km
temp   <- raster(poly_utm,resolution=1000,
ext=my_ext,crs=my_crs)
### Emplir le raster avec les valeurs du vecteur initial pour le champs "CDE_PR_FEC"
raster <- rasterize(x=poly_utm,y=temp,
field="CDE_PR_FEC",
background=0,fun='first',
update=TRUE)
### Afficher le raster et le vecteur par dessus
plot(raster)
plot(poly_utm,add=TRUE)
plot(point_utm,add=T)
mon_poly <-poly_utm[poly_utm$NOM_PR_FEC=="PLATEAUX",]
mon_poly
### Ajouter le département en Bleu
plot(mon_poly,add=T,col="blue")
### Afficher le polygones par ses sommets
plot(mon_poly@polygons[[1]]@Polygons[[1]]@coords)
coord<-mon_poly@polygons[[1]]@Polygons[[1]]@coords
### Créer un deuxième département
sangha <-poly_utm[poly_utm$NOM_PR_FEC=="SANGHA",]
### Fusionner les deux polygones
union <- gUnion(sangha,mon_poly)
plot(union)
### Sélectionner des éléments dans un vecteur par leur localisation
pts_sangha <- point_utm[sangha,]
plot(pts_sangha)
### Calculer le nombre d'élément d'un vecteur
# selon les géométrie d'un autre vecteur
poly_utm_ifn<-aggregate(x = point_utm["Code_Point"],by = poly_utm,FUN = length)
poly_utm$IFN_pts <- poly_utm_ifn$Code_Point
poly_utm@data
### Joindre des attributs spatiaux
point_utm$DPT <- aggregate(x = poly_utm["NOM_PR_FEC"], by = point_utm,FUN=first)$NOM_PR_FEC
head(point_utm)
### Transformer une table en fichier spatial-vecteur
df    <- read.csv("../data/NFI_data_biomasse.csv")
summary(df)
sp_df <- SpatialPointsDataFrame(
coords = df[,c(1,2)],
data   = data.frame(df[,c(3)]),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
nfi_utm <- spTransform(sp_df, CRS("+init=epsg:32633"))
names(nfi_utm)<-"biomass"
?tmap
### Utiliser le package tmap
tm_shape(poly_utm) +
tm_fill("NOM_PR_FEC", style="kmeans", title="Département du Congo")+
tm_borders()+
tm_shape(nfi_utm)+
tm_bubbles(size="biomass","darkgrey",scale=0.5,border.col = "black", border.lwd=1, size.lim = c(0,800),
sizes.legend = seq(0,800, by=200), title.size="Biomasse t/ha")+
tm_layout( title.position = c("center", "center"), title.size = 20)
raster <- raster("../data/raster_utcatf.tif")
poly   <- readOGR(dsn="../data",layer="congo_departement_geo")
points <- readOGR(dsn="../data",layer="points_NFI")
table  <- read.csv("../data/NFI_data_biomasse.csv")
gfc_tc <- raster("../data/gfc_aggrege.tif")
### Afficher graphiquement toutes les valeurs du fichier biomasse
plot(table$biomass_tha)
res(gfc_tc)*111000
projection(gfc_tc)
### Faire un masque foret non foret a partir du fichier gfc_tc:
#mask <- (gfc_tc > 30)*gfc_tc
#plot(mask)
#plot(gfc_tc)
### Extraire la valeur du raster (nouvelle colonne "UTCATF") pour chaque point du fichier biomasse
table$utcatf <- extract(raster,table[,c(1:2)])
head(table,2)
### Afficher les Boites à Moustache de la biomasse pour chaque classe de la carte
graphics::boxplot(table$biomass_tha ~ table$utcatf)
### Faire une reclassification thématique (sur une portion plus petite)
clip<-crop(raster,extent(14,15,1,2))
plot(clip)
rcl <- data.frame(cbind(c(2,4,11,12,13,31,32,33,34),
c(2,4,1,1,1,3,3,3,3)
)
)
reclass <- reclassify(clip,rcl)
writeRaster(reclass,"reclass.tif")
sangha <- poly[poly$NOM_PR_FEC == "SANGHA",]
#ext <- as.data.frame(extract(clip,sangha,method="simple"))
#table(ext)
writeOGR(obj=sangha,dsn="sangha.shp",
layer="sangha",driver = "ESRI Shapefile")
### Créer un raster de plus basse résolution
agg<-aggregate(raster,fact=10,fun=max)
### Créer la liste des départements
list<-levels(as.factor(poly$NOM_PR_FEC))
### Créer une fonction zonale
cgo_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$NOM_PR_FEC == dpt,]
)
)
)
}
### Appliquer la fonction zonale avec le raster aggrégé pour un département
cgo_zonal("BOUENZA",agg)
options(stringsAsFactors = FALSE)
library(foreign)
library(plyr)
library(ggplot2)
library(ggplot2)
library("ggplot2", lib.loc="~/R/win-library/3.2")
detach("package:ggplot2", unload=TRUE)
update.packages(checkBuilt=FALSE, ask=FALSE)
?library
.libPaths()
